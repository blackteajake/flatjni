// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HELLO_COM_GITHUB_JEKINCHEN_FLATJNI_H_
#define FLATBUFFERS_GENERATED_HELLO_COM_GITHUB_JEKINCHEN_FLATJNI_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace github {
namespace jekinchen {
namespace flatjni {

struct HelloRequest;

struct HelloReply;

struct SumParam;

struct SumResult;

struct HelloRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct HelloRequestBuilder {
public:
  HelloRequestBuilder(
    const char *name = nullptr
  ) {
    flatbuffers::Offset<flatbuffers::String> _name_ = name ? fbb_.CreateString(name) : 0;
    start_ = fbb_.StartTable();
    add_name(_name_);
    fbb_.Finish(Finish());
  }

  const flatbuffers::FlatBufferBuilder &fbb() { return fbb_; }


private:
  flatbuffers::FlatBufferBuilder fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HelloRequest::VT_NAME, name);
  }
  HelloRequestBuilder &operator=(const HelloRequestBuilder &);
  flatbuffers::Offset<HelloRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<HelloRequest>(end);
    return o;
  }
};

struct HelloReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GREETING = 4
  };
  const flatbuffers::String *greeting() const {
    return GetPointer<const flatbuffers::String *>(VT_GREETING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GREETING) &&
           verifier.Verify(greeting()) &&
           verifier.EndTable();
  }
};

struct HelloReplyBuilder {
public:
  HelloReplyBuilder(
    const char *greeting = nullptr
  ) {
    flatbuffers::Offset<flatbuffers::String> _greeting_ = greeting ? fbb_.CreateString(greeting) : 0;
    start_ = fbb_.StartTable();
    add_greeting(_greeting_);
    fbb_.Finish(Finish());
  }

  const flatbuffers::FlatBufferBuilder &fbb() { return fbb_; }


private:
  flatbuffers::FlatBufferBuilder fbb_;
  flatbuffers::uoffset_t start_;
  void add_greeting(flatbuffers::Offset<flatbuffers::String> greeting) {
    fbb_.AddOffset(HelloReply::VT_GREETING, greeting);
  }
  HelloReplyBuilder &operator=(const HelloReplyBuilder &);
  flatbuffers::Offset<HelloReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<HelloReply>(end);
    return o;
  }
};

struct SumParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_I = 4,
    VT_J = 6
  };
  int32_t i() const {
    return GetField<int32_t>(VT_I, 0);
  }
  int32_t j() const {
    return GetField<int32_t>(VT_J, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_I) &&
           VerifyField<int32_t>(verifier, VT_J) &&
           verifier.EndTable();
  }
};

struct SumParamBuilder {
public:
  SumParamBuilder(
    int32_t i = 0,    
    int32_t j = 0
  ) {
    start_ = fbb_.StartTable();
    add_j(j);
    add_i(i);
    fbb_.Finish(Finish());
  }

  const flatbuffers::FlatBufferBuilder &fbb() { return fbb_; }


private:
  flatbuffers::FlatBufferBuilder fbb_;
  flatbuffers::uoffset_t start_;
  void add_i(int32_t i) {
    fbb_.AddElement<int32_t>(SumParam::VT_I, i, 0);
  }
  void add_j(int32_t j) {
    fbb_.AddElement<int32_t>(SumParam::VT_J, j, 0);
  }
  SumParamBuilder &operator=(const SumParamBuilder &);
  flatbuffers::Offset<SumParam> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<SumParam>(end);
    return o;
  }
};

struct SumResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RESULT = 4
  };
  int32_t result() const {
    return GetField<int32_t>(VT_RESULT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct SumResultBuilder {
public:
  SumResultBuilder(
    int32_t result = 0
  ) {
    start_ = fbb_.StartTable();
    add_result(result);
    fbb_.Finish(Finish());
  }

  const flatbuffers::FlatBufferBuilder &fbb() { return fbb_; }


private:
  flatbuffers::FlatBufferBuilder fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(int32_t result) {
    fbb_.AddElement<int32_t>(SumResult::VT_RESULT, result, 0);
  }
  SumResultBuilder &operator=(const SumResultBuilder &);
  flatbuffers::Offset<SumResult> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<SumResult>(end);
    return o;
  }
};

}  // namespace flatjni
}  // namespace jekinchen
}  // namespace github
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_HELLO_COM_GITHUB_JEKINCHEN_FLATJNI_H_
