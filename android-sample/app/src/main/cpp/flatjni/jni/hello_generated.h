// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HELLO_COM_JK_GREETER_H_
#define FLATBUFFERS_GENERATED_HELLO_COM_JK_GREETER_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace jk {
namespace greeter {

struct HelloRequest;

struct HelloReply;

struct PlayRequest;

struct PlayResult;

struct HelloRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
};

struct HelloRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(HelloRequest::VT_MESSAGE, message);
  }
  HelloRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloRequestBuilder &operator=(const HelloRequestBuilder &);
  flatbuffers::Offset<HelloRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<HelloRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloRequest> CreateHelloRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  HelloRequestBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloRequest> CreateHelloRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  return com::jk::greeter::CreateHelloRequest(
      _fbb,
      message ? _fbb.CreateString(message) : 0);
}

struct HelloReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ISOK = 4,
    VT_COUNT = 6,
    VT_NAME = 8,
    VT_TOTAL = 10,
    VT_DISTANCE = 12,
    VT_PRICE = 14
  };
  bool isOK() const {
    return GetField<uint8_t>(VT_ISOK, 0) != 0;
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int64_t total() const {
    return GetField<int64_t>(VT_TOTAL, 0);
  }
  float distance() const {
    return GetField<float>(VT_DISTANCE, 0.0f);
  }
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ISOK) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int64_t>(verifier, VT_TOTAL) &&
           VerifyField<float>(verifier, VT_DISTANCE) &&
           VerifyField<double>(verifier, VT_PRICE) &&
           verifier.EndTable();
  }
};

struct HelloReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_isOK(bool isOK) {
    fbb_.AddElement<uint8_t>(HelloReply::VT_ISOK, static_cast<uint8_t>(isOK), 0);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(HelloReply::VT_COUNT, count, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HelloReply::VT_NAME, name);
  }
  void add_total(int64_t total) {
    fbb_.AddElement<int64_t>(HelloReply::VT_TOTAL, total, 0);
  }
  void add_distance(float distance) {
    fbb_.AddElement<float>(HelloReply::VT_DISTANCE, distance, 0.0f);
  }
  void add_price(double price) {
    fbb_.AddElement<double>(HelloReply::VT_PRICE, price, 0.0);
  }
  HelloReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloReplyBuilder &operator=(const HelloReplyBuilder &);
  flatbuffers::Offset<HelloReply> Finish() {
    const auto end = fbb_.EndTable(start_, 6);
    auto o = flatbuffers::Offset<HelloReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloReply> CreateHelloReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool isOK = false,
    int32_t count = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int64_t total = 0,
    float distance = 0.0f,
    double price = 0.0) {
  HelloReplyBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_total(total);
  builder_.add_distance(distance);
  builder_.add_name(name);
  builder_.add_count(count);
  builder_.add_isOK(isOK);
  return builder_.Finish();
}

inline flatbuffers::Offset<HelloReply> CreateHelloReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool isOK = false,
    int32_t count = 0,
    const char *name = nullptr,
    int64_t total = 0,
    float distance = 0.0f,
    double price = 0.0) {
  return com::jk::greeter::CreateHelloReply(
      _fbb,
      isOK,
      count,
      name ? _fbb.CreateString(name) : 0,
      total,
      distance,
      price);
}

    inline flatbuffers::FlatBufferBuilder *CreateHelloReplyBufferBuilder(
            bool isOK = false,
            int32_t count = 0,
            const char *name = nullptr,
            int64_t total = 0,
            float distance = 0.0f,
            double price = 0.0) {

      flatbuffers::FlatBufferBuilder *fbb = new flatbuffers::FlatBufferBuilder();
      fbb->Finish(CreateHelloReplyDirect(*fbb, isOK, count, name, total, distance, price));
      return fbb;
    }

struct PlayRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
};

struct PlayRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(PlayRequest::VT_PATH, path);
  }
  PlayRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayRequestBuilder &operator=(const PlayRequestBuilder &);
  flatbuffers::Offset<PlayRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<PlayRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayRequest> CreatePlayRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  PlayRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayRequest> CreatePlayRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  return com::jk::greeter::CreatePlayRequest(
      _fbb,
      path ? _fbb.CreateString(path) : 0);
}

struct PlayResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERR = 4,
    VT_MSG = 6
  };
  int32_t err() const {
    return GetField<int32_t>(VT_ERR, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERR) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct PlayResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_err(int32_t err) {
    fbb_.AddElement<int32_t>(PlayResult::VT_ERR, err, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(PlayResult::VT_MSG, msg);
  }
  PlayResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayResultBuilder &operator=(const PlayResultBuilder &);
  flatbuffers::Offset<PlayResult> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<PlayResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayResult> CreatePlayResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t err = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  PlayResultBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_err(err);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayResult> CreatePlayResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t err = 0,
    const char *msg = nullptr) {
  return com::jk::greeter::CreatePlayResult(
      _fbb,
      err,
      msg ? _fbb.CreateString(msg) : 0);
}

inline const com::jk::greeter::HelloRequest *GetHelloRequest(const void *buf) {
  return flatbuffers::GetRoot<com::jk::greeter::HelloRequest>(buf);
}

inline bool VerifyHelloRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::jk::greeter::HelloRequest>(nullptr);
}

inline void FinishHelloRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::jk::greeter::HelloRequest> root) {
  fbb.Finish(root);
}

}  // namespace greeter
}  // namespace jk
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_HELLO_COM_JK_GREETER_H_
